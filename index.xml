<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>heyuuuu77</title>
    <link>https://heyuuuu77.github.io/</link>
    <description>Recent content on heyuuuu77</description>
    <image>
      <title>heyuuuu77</title>
      <url>https://heyuuuu77.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://heyuuuu77.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- 0.141.0</generator>
    <language>en</language>
    <lastBuildDate>Fri, 21 Feb 2025 08:46:57 +0800</lastBuildDate>
    <atom:link href="https://heyuuuu77.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>歌单</title>
      <link>https://heyuuuu77.github.io/posts/music_list/</link>
      <pubDate>Wed, 15 Jan 2025 11:30:03 +0000</pubDate>
      <guid>https://heyuuuu77.github.io/posts/music_list/</guid>
      <description>只是分享记录几首自己喜欢的音乐，支持正版音乐</description>
    </item>
    <item>
      <title>分布式系统</title>
      <link>https://heyuuuu77.github.io/posts/distributed_system/</link>
      <pubDate>Fri, 21 Feb 2025 08:46:57 +0800</pubDate>
      <guid>https://heyuuuu77.github.io/posts/distributed_system/</guid>
      <description>&lt;h3 id=&#34;名词解释&#34;&gt;名词解释&lt;/h3&gt;
&lt;h4 id=&#34;cap理论&#34;&gt;CAP理论&lt;/h4&gt;
&lt;p&gt;该理论指出，一个分布式系统不可能同时满足一下三个特性:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一致性(Consistency): 所有节点同一时间看到的数据是相同的。也就是说，当一个数据更新操作在系统的某个节点上执行成功后，在后续的任何节点上进行数据读取操作时，都能获取到更新后的值。&lt;/li&gt;
&lt;li&gt;可用性(Availability): 系统中的每一个非故障节点都能在合理的时间内响应客户端的请求。即无论何时，客户端发起的请求都能得到响应，不会出现系统不可用的情况。&lt;/li&gt;
&lt;li&gt;分区容错性(Partition tolerance): 系统在遇到任何网络分区故障时，仍然能够保证对外提供满足一致性或可用性的服务。网络分区是指由于网络问题导致部分节点之间无法通信。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;理解&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;在分布式系统中，由于网络的不确定性，分区容错性是必须要考虑的因素，也就是 P 是必然存在的。因此，在实际应用中，通常需要在一致性（C）和可用性（A）之间做出权衡&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;CP 系统&lt;/em&gt;：优先保证一致性和分区容错性，牺牲部分可用性。例如，ZooKeeper 就是一个典型的 CP 系统，当发生网络分区时，为了保证数据的一致性，系统可能会暂时不可用，直到分区问题解决。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;AP 系统&lt;/em&gt;：优先保证可用性和分区容错性，牺牲部分一致性。比如，Amazon 的 Dynamo 系统，它允许在不同节点上的数据存在短暂的不一致，但保证系统始终可以响应客户端的请求。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;base理论&#34;&gt;BASE理论&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;定义&lt;/em&gt;
是对 CAP 理论中 AP 方案的一个扩展和延伸，它的核心思想是即使无法做到强一致性，但每个应用都可以根据自身的业务特点，采用适当的方式来使系统达到最终一致性。BASE 是三个短语的缩写：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基本可用（Basically Available）：指分布式系统在出现故障时，允许损失部分可用性，即保证核心功能可用，但可能会出现响应时间延长、服务降级等情况。例如，在电商大促期间，系统可能会对一些非核心业务功能进行限流，以保证核心的交易功能正常运行。&lt;/li&gt;
&lt;li&gt;软状态（Soft state）：允许系统中的数据存在中间状态，并且这种中间状态不会影响系统的整体可用性。也就是说，系统中的数据可以在一段时间内处于不一致的状态。&lt;/li&gt;
&lt;li&gt;最终一致性（Eventual consistency）：系统中的所有数据副本，在经过一段时间的同步后，最终能够达到一致的状态。最终一致性是 BASE 理论的核心，它强调的是数据在一段时间后会达到一致，而不是实时一致。&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title>设计模式之美</title>
      <link>https://heyuuuu77.github.io/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E/</link>
      <pubDate>Fri, 14 Feb 2025 09:32:22 +0800</pubDate>
      <guid>https://heyuuuu77.github.io/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E/</guid>
      <description>&lt;h4 id=&#34;面向对象&#34;&gt;面向对象&lt;/h4&gt;
&lt;p&gt;面向对象编程是因为其具有丰富的特性(封装，抽象，继承，多态)，可以实现很多复杂的设计思路。&lt;/p&gt;
&lt;h4 id=&#34;设计原则&#34;&gt;设计原则&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;SOLID原则 - SRP 单一职责原则&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SOLID原则 - OCP 开闭原则(对扩展开放，对修改关闭)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SOLID原则 - LSP 里式替换原则: &lt;br&gt;
&lt;strong&gt;解释：&lt;/strong&gt; 所有引用基类的地方必须能透明地使用其子类的对象，也就是说，子类对象可以替换掉它们的基类对象，而程序的行为不会发生改变。&lt;br&gt;
&lt;strong&gt;示例：&lt;/strong&gt; 在一个游戏中有一个动物类，鸟类继承自动物类。如果在游戏中需要使用动物类的某个方法，那么使用鸟类对象来调用这个方法也应该能正常工作，并且不会出现意外的结果。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SOLID原则 - ISP 接口隔离原则 &lt;br&gt;
&lt;strong&gt;解释：&lt;/strong&gt; 客户端不应该依赖它不需要的接口，即一个接口应该只包含客户端真正需要的方法，而不应该包含一些无关的方法。&lt;br&gt;
&lt;strong&gt;示例：&lt;/strong&gt; 在一个游戏开发中，有一个游戏控制器接口，其中只应该包含与游戏控制相关的方法，如开始游戏、暂停游戏等，而不应该包含与游戏画面渲染等无关的方法。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SOLID原则 - DIP 依赖倒置原则 &lt;br&gt;
&lt;strong&gt;解释：&lt;/strong&gt; 高层模块不应该依赖低层模块，两者都应该依赖其抽象；抽象不应该依赖细节，细节应该依赖抽象。即要针对接口编程，而不是针对实现编程。&lt;br&gt;
&lt;strong&gt;示例：&lt;/strong&gt; 在一个游戏开发中，游戏的业务逻辑模块是高层模块，游戏的底层渲染模块是低层模块。业务逻辑模块不应该直接依赖底层渲染模块的具体实现，而是应该依赖一个抽象的渲染接口，底层渲染模块实现这个接口。这样，当需要更换底层渲染引擎时，只需要更换实现渲染接口的类，而不需要修改业务逻辑模块的代码。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DRY原则(Don&amp;rsquo;t Repeat Yourself)、 KISS原则、 YAGNI原则(You Aren&amp;rsquo;t Gonna Need It)、 LOD法则(Law Of Demete)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;设计模式&#34;&gt;设计模式&lt;/h4&gt;
&lt;p&gt;经典的23种设计模式，分为创建型，结构型，行为型。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;创建型: (5)
&lt;strong&gt;常用&lt;/strong&gt; 单例模式、工厂模式(工厂方法和抽象工厂)、建造者模式 (4)
&lt;strong&gt;不常用&lt;/strong&gt; 原型模式 (1)&lt;/p&gt;
&lt;p&gt;创建型模式主要解决对象的创建问题，封装复杂的创建过程，解偶对象的创建代码和使用代码。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;结构型: (7)
&lt;strong&gt;常用&lt;/strong&gt; 代理模式、 桥接模式、 装饰者模式、适配器模式 (4)
&lt;strong&gt;不常用&lt;/strong&gt; 门面模式、组合模式、享元模式 (3)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;行为型: (11)
&lt;strong&gt;常用&lt;/strong&gt; 观察者模式、模版模式、策略模式、责任链模式、迭代器模式、状态模式 (6)
&lt;strong&gt;不常用&lt;/strong&gt; 访问者模式、备忘录模式、命令模式、解释器模式、中介模式 (5)&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go语言实战笔记</title>
      <link>https://heyuuuu77.github.io/posts/go/</link>
      <pubDate>Thu, 13 Feb 2025 10:20:34 +0800</pubDate>
      <guid>https://heyuuuu77.github.io/posts/go/</guid>
      <description>&lt;h5 id=&#34;引用类型&#34;&gt;引用类型&lt;/h5&gt;
&lt;p&gt;通道(channel)、 映射(map)、 切片(slice)&lt;/p&gt;
&lt;h4 id=&#34;sync&#34;&gt;sync&lt;/h4&gt;
&lt;p&gt;sync 包提供同步 goroutine 的功能。 在Go语言中， main终止则代表了程序终止， main函数终止前还会关闭所有之前启动且运行的 goroutine。
并发写程序时，最佳做法是 在main函数返回前，清理并终止所有之前启动的 goroutine。编写启动和终止都清晰的程序，减少bug，防止资源异常。&lt;/p&gt;
&lt;p&gt;sync 包的 WaitGroup 会跟踪所有启动的 goroutine。 WaitGroup 是一个计数信号量，用来统计每个 goroutine 是否完成了工作。
具体做法是: 将 WaitGroup 的变量值设置为要启动的 goroutine 数量。 每个 goroutine 完成工作后， 递减 WaitGroup 变量的计数值。
当这个值为0，就知道所有的 goroutine 都完成了工作。&lt;/p&gt;
&lt;h5 id=&#34;命名规范&#34;&gt;命名规范&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;命名接口时，如果接口内就一个方法，需要以 er 结尾。 如 Matcher。 如果接口类型内部声明了多个方法，其名字需要与其行为关联&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;最佳实践&#34;&gt;最佳实践&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;如果声明函数的时候带有接收者，则意味着声明了一个方法。这个方法会和指定的接收者类型绑定在一起。
值类型和引用类型作为接收者的方法，在调用时编译器会自动编码/解码对应的类型，然后传递给方法。例如&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 方法声明为使用 defaultMatcher 类型的值作为接收者&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;m&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;defaultMatch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Search&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;feed&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Feed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;stringTerm&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 声明一个指向 defaultMatcher类型值的指针&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;dm&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;defaultMatch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 编译器会解开dm指针的引用，使用对应的值调用方法&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;dm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Search&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;feed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 方法声明为使用指向defaultMatcher类型值的指针作为接收者&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;m&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;defaultMatcher&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Search&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;feed&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Feed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;searchTerm&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 声明一个defaultMatcher类型的值&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;dm&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;defaultMatch&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 编译器会自动生成指针引用dm值，使用指针调用方法&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;dm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Search&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;feed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;”&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;与直接通过值或者指针调用不同， 如果通过接口类型的值调用方法，规则有很大不同。
1. 使用指针作为接收者声明的方法，只能在接口类型的值是一个指针的时候被调用。
2. 使用值作为接收者声明的方法，在接口类型的值为值或者指针时，都可以被调用。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kafka</title>
      <link>https://heyuuuu77.github.io/posts/kafka/</link>
      <pubDate>Wed, 12 Feb 2025 19:36:38 +0800</pubDate>
      <guid>https://heyuuuu77.github.io/posts/kafka/</guid>
      <description>&lt;h4 id=&#34;kafka&#34;&gt;Kafka&lt;/h4&gt;
&lt;p&gt;分布式的消息引擎系统&lt;/p&gt;
&lt;h4 id=&#34;名词解释&#34;&gt;名词解释&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;消息(Record): Kafka处理的对象。&lt;/li&gt;
&lt;li&gt;主题(Topic): 承载消息的容器，可以为每个业务、应用甚至每类数据都创建专属主题。&lt;/li&gt;
&lt;li&gt;分区(Partition): 一个有序不变的消息序列，将每个主题划分成多个分区，每个分区是一组有序的消息日志。Kafka分区编号从0开始。&lt;/li&gt;
&lt;li&gt;消息位移(Offset): 分区中每条消息的位置信息，单调递增且不变的值。&lt;/li&gt;
&lt;li&gt;副本(Replica): 又分为领导者副本(Leader Replica) 和追随者副本(Follower Replica)。 前者对外提供服务，指与客户端程序交互。后者被动追随，不与外界进行交互。
副本的工作机制: 生产者总是向领导者副本写消息；而消费者总是从领导者副本读消息。 追随者副本向领导者副本发送请求，请求领导者把最新生产的消息发给它。这样它就可以跟领导者同步。&lt;/li&gt;
&lt;li&gt;生产者(Producer): 向主题发布消息的客户端应用程序称之为生产者。&lt;/li&gt;
&lt;li&gt;消费者(Consumer): 定于主题消息的客户端应用程序。&lt;/li&gt;
&lt;li&gt;消费者位移(Consumer Offset): 表征消费者消费进度，每个消费者都有自己的消费者位移。&lt;/li&gt;
&lt;li&gt;消费者组(Consumer Group): 多个消费者实例共同组成一个组，同时消费多个分区以实现高吞吐。&lt;/li&gt;
&lt;li&gt;重平衡(Rebalance): 消费者组内某个消费者实例挂掉后，其他消费者实例自动重新分配订阅主题分区的过程。Rebalance 是。Kafka 消费者端实现高可用的重要手段。&lt;/li&gt;
&lt;li&gt;客户端(Clients): 生产者/消费者统称为客户端&lt;/li&gt;
&lt;li&gt;Broker: Kafka的服务器端由Broker的服务进程构成，即一个Kafka集群由多个Broker组成，Broker负责接收和处理客户端发送过来的请求，以及对消息持久化&lt;/li&gt;
&lt;li&gt;备份机制(Replication): 将相同数据拷贝到多台机器上，这些相同数据拷贝在Kafka中被称为副本(Replica)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每个分区都可以配置若干个副本，其中只能有1个领导者副本和 N-1个追随者副本。&lt;/p&gt;
&lt;h4 id=&#34;三层消息架构&#34;&gt;三层消息架构&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;主题层: 每个主题配置 M 个分区，每个分区又可以配置 N 个副本。&lt;/li&gt;
&lt;li&gt;分区层: 每个分区的 N 个副本只有一个领导者，对外提供服务， 其他 N-1 个副本是追随者副本， 指示提供数据备份。&lt;/li&gt;
&lt;li&gt;消息层: 分区中包括若干消息，每条消息的位移从0开始，依次递增。 最终客户端是能与分区领导者副本进行交互。&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Hugo</title>
      <link>https://heyuuuu77.github.io/posts/hugo/</link>
      <pubDate>Sat, 08 Feb 2025 17:06:08 +0800</pubDate>
      <guid>https://heyuuuu77.github.io/posts/hugo/</guid>
      <description>&lt;p&gt;使用Hugo搭建 github page越到的坑。 首先 hugo 命令会生成静态文件。
本地查看的时候执行的命令是 &lt;code&gt;hugo server&lt;/code&gt;。 这个时候，草稿是不会暂时出来的。如果需要暂时草稿， 需要加上参数 &lt;code&gt;-D&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;创建新的文章的命令是: &lt;code&gt;hugo new posts/your-post-name.md&lt;/code&gt;. 注意这个时候自动生成的 markdown文件中的 draft 默认为true，表示当前是草稿模式。
如果要可以见，需要将其设置成false。&lt;/p&gt;
&lt;p&gt;接下来如果本地看了没问题，重点是需要关闭本地服务, 即&lt;code&gt;hugo server&lt;/code&gt; 打开的服务，并重新执行&lt;code&gt;hugo&lt;/code&gt;。
不这样做，hugo会将public下的静态文件全部编译成本地。 这时候提交到github，静态文件的跳转链接会乱掉。全部指向本地链接。&lt;/p&gt;
&lt;p&gt;提交至github page时，不用把hugo项目全部提交上去，而是进入到hugo项目的public 路径下，执行git init， 然后添加 remote。 在提交就OK了&lt;/p&gt;</description>
    </item>
    <item>
      <title>Interview</title>
      <link>https://heyuuuu77.github.io/posts/interview/</link>
      <pubDate>Sat, 08 Feb 2025 16:55:54 +0800</pubDate>
      <guid>https://heyuuuu77.github.io/posts/interview/</guid>
      <description>&lt;h3 id=&#34;记录一下面试&#34;&gt;记录一下面试&lt;/h3&gt;
&lt;h5 id=&#34;面试莉莉丝----失败&#34;&gt;面试莉莉丝 &amp;ndash; 失败&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;失败理由:&lt;/code&gt; 各方面还不错，但是有更合适的人选。&lt;/p&gt;
&lt;p&gt;知道这只是那边的比较委婉的表达。 一面总体来说没聊什么技术问题。聊了一些业务相关的。
比较意想不到的提问是： 如果我是业务方，我会比较看重哪些指标。 这个问题我是比较错愕的，我面试的是技术开发岗位，一般负责的是具体的功能落地等相关技术更多。
倒也不是完全不关心业务，只是有些太偏向业务理解了。更多的是像面试数据分析师/市场投放业务相关的岗位。
个人理解是看重哪些指标是要看具体的目的，整体看一段时间内的广告情况可能会比较看重ROI。看某些特定的广告效果，可能会看CPI，CPM这些指标。&lt;/p&gt;
&lt;p&gt;一面总体比较无奈，用的编程语言是Python，都没有到比较深入的技术问题。大多是一些比较意识流的理解。 准备的很多知识也没用上，不过这些都是积累，用不上也还是我自己的知识。感觉好可惜，非常喜欢莉莉丝这家公司。
很重视这次面试，为此还专门请了半天假在家面试。还在试用期，扣了半天的工资。唉，果然期待越高，失败之后越难过。有点傻&lt;/p&gt;
&lt;p&gt;唉。 后面波克城市有类似的岗位。简历送到用人部门过leader筛选了。希望能有反馈。&lt;/p&gt;
&lt;p&gt;心情：非常有挫败感 💔
&amp;mdash;- 记录于 2025-02-08 16:55.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Django的常见问题</title>
      <link>https://heyuuuu77.github.io/posts/django/</link>
      <pubDate>Wed, 05 Feb 2025 11:09:45 +0800</pubDate>
      <guid>https://heyuuuu77.github.io/posts/django/</guid>
      <description>&lt;h4 id=&#34;什么是orm&#34;&gt;什么是ORM&lt;/h4&gt;
&lt;p&gt;ORM 即对象关系映射，它将数据库中的表映射为 Python 类，将表中的记录映射为类的实例，通过操作类和实例来操作数据库。优点包括提高开发效率、可移植性强、安全性高（自动处理 SQL 注入）等。&lt;/p&gt;
&lt;h4 id=&#34;什么是-n1问题&#34;&gt;什么是 N+1问题&lt;/h4&gt;
&lt;p&gt;Django 的 ORM（对象关系映射）为开发者提供了便捷的数据库操作方式，允许通过 Python 对象来操作数据库。然而，当进行关联查询时，如果处理不当，就容易引发 N + 1 查询问题。其核心原因在于，在进行多次查询时，没有一次性获取所有关联数据，而是先执行一次查询获取主对象列表，然后针对每个主对象，再分别执行一次查询来获取其关联对象，这就导致查询次数过多，性能下降。&lt;/p&gt;
&lt;p&gt;简单来说就是多表关联的时候，如果涉及到一对多的关联关系， 查询完成“一”之后，在遍历这个“一”获取其关联的多条数据时， 就面临了N的问题。&lt;/p&gt;
&lt;p&gt;django中提供了 select_related() 和 prefetch_related()&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;select_related()&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;前者主要用来处理 一对一/外键关联关联(ForeignKey和OneToOneField), 它通过sql中的join一次性查询所有相关数据，代码如下&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 由于这里是反向查询，select_related 不适用，下面只是示例其使用场景&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 如果是正向查询，比如从 Book 查询 Author 可以用 select_related&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;books&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Book&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;objects&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;select_related&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;author&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;all&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;book&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;books&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;book&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; 的作者是 &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;book&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;author&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;prefetch_related()&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;prefetch_related() 用于处理多对多和反向关联（如上述示例中从 Author 查询 Book），它通过多次查询并在 Python 层面合并数据。修改最初的代码如下:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;authors&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Author&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;objects&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;prefetch_related&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;books&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;all&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;author&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;authors&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;book_count&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;author&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;books&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;author&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; 有 &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;book_count&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; 本书。&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里，prefetch_related(&amp;lsquo;books&amp;rsquo;) 会先执行一次查询获取所有作者，再执行一次查询获取所有相关的书籍，然后在 Python 层面将它们关联起来。总共只执行了 2 次查询，而不是 N + 1 次查询，有效提高了性能。&lt;/p&gt;</description>
    </item>
    <item>
      <title>设计模式详解</title>
      <link>https://heyuuuu77.github.io/posts/design_pattern/</link>
      <pubDate>Wed, 05 Feb 2025 10:00:19 +0800</pubDate>
      <guid>https://heyuuuu77.github.io/posts/design_pattern/</guid>
      <description>&lt;p&gt;设计模式是软件开发中针对各种反复出现的问题归纳出的通用的解决方案，总共有23种设计模式，分别分成创建型，结构性和行为型三大类&lt;/p&gt;
&lt;h4 id=&#34;创建型&#34;&gt;创建型&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;单例模式
确保一个类只有一个实例，并提供一个全局访问点来访问这个实例。
Python中的实现方式是通过__new__魔术方法实现。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Singleton&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;_instance&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__new__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;cls&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kwargs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;cls&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_instance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;bp&#34;&gt;cls&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_instance&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fm&#34;&gt;__new__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;cls&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kwargs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;cls&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_instance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 使用示例&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;s1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Singleton&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;s2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Singleton&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s1&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# 输出: True&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;工厂模式&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;工厂模式可细分为简单工厂模式、工厂方法模式和抽象工厂模式。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;简单工厂模式&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;定义一个工厂类，该类有一个创建对象的方法，通过传入不同的参数来创建不同类型的对象。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Animal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;speak&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;pass&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Dog&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Animal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;speak&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Woof!&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Cat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Animal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;speak&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Meow!&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;AnimalFactory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nd&#34;&gt;@staticmethod&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;create_animal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;animal_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;animal_type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;dog&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Dog&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;elif&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;animal_type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;cat&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Cat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 使用示例&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;dog&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AnimalFactory&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;create_animal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;dog&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dog&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;speak&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# 输出: Woof!&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;工厂模式&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;将对象的创建延迟到子类中进行。定义一个创建对象的抽象方法，由具体的子类来实现该方法，从而创建具体的对象&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Animal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;speak&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;pass&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Dog&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Animal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;speak&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Woof!&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Cat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Animal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;speak&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Meow!&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;AnimalFactory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;create_animal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;pass&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;DogFactory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AnimalFactory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;create_animal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Dog&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;CatFactory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AnimalFactory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;create_animal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Cat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 使用示例&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;dog_factory&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DogFactory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;dog&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dog_factory&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;create_animal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dog&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;speak&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# 输出: Woof!&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;抽象工厂模式&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类&lt;/p&gt;</description>
    </item>
    <item>
      <title>Redis</title>
      <link>https://heyuuuu77.github.io/posts/redis/</link>
      <pubDate>Wed, 05 Feb 2025 09:39:00 +0800</pubDate>
      <guid>https://heyuuuu77.github.io/posts/redis/</guid>
      <description>&lt;h4 id=&#34;数据类型&#34;&gt;数据类型&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;String: 字符串&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hash: 哈希, 是一个键值对集合，类似于 Python 中的字典。适合存储对象，一个哈希可以包含多个字段和对应的值，每个哈希最多可存储2^32 -1个键值对。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;常见命令:
&lt;ol&gt;
&lt;li&gt;设置单个字段值：HSET key field value，例如 HSET user:1 name &amp;ldquo;Bob&amp;rdquo;。&lt;/li&gt;
&lt;li&gt;获取单个字段值：HGET key field，例如 HGET user:1 name 会返回 &amp;ldquo;Bob&amp;rdquo;。&lt;/li&gt;
&lt;li&gt;获取所有字段和值：HGETALL key。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;List: 列表&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set: 集合&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sorted Set: 有序集合&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Python的一些知识点</title>
      <link>https://heyuuuu77.github.io/posts/python/</link>
      <pubDate>Wed, 15 Jan 2025 11:30:03 +0000</pubDate>
      <guid>https://heyuuuu77.github.io/posts/python/</guid>
      <description>&lt;h4 id=&#34;python的数据类型&#34;&gt;Python的数据类型&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;int: 整型&lt;/li&gt;
&lt;li&gt;float: 浮点型&lt;/li&gt;
&lt;li&gt;bool: 布尔值&lt;/li&gt;
&lt;li&gt;str: 字符串&lt;/li&gt;
&lt;li&gt;list: 列表，是一种可变的、有序的序列，可以包含不同类型的元素。使用方括号 [] 来定义。&lt;/li&gt;
&lt;li&gt;tuple: 元祖，是一种不可变的、有序的序列，一旦创建，其元素不能被修改。使用圆括号 () 来定义。&lt;/li&gt;
&lt;li&gt;set: 集合，是一种无序的、唯一的数据集合，不允许有重复的元素。使用花括号 {} 或 set() 函数来定义&lt;/li&gt;
&lt;li&gt;dict: 字典，是一种无序的键值对集合，每个键必须是唯一的，且键必须是可哈希的数据类型（如整数、字符串、元组等）。使用花括号 {} 来定义，键和值之间用冒号 : 分隔&lt;/li&gt;
&lt;li&gt;NoneType: 只有一个值 None，通常用于表示变量没有值或函数没有返回值。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;list列表-与-tuple元祖-的区别&#34;&gt;List(列表) 与 Tuple(元祖) 的区别&lt;/h4&gt;
&lt;p&gt;List 可变，通过可以通过索引修改、添加或删除， 使用[]定义。 Tuple不可变，使用()定义。&lt;/p&gt;
&lt;h4 id=&#34;可迭代对象&#34;&gt;可迭代对象&lt;/h4&gt;
&lt;p&gt;包含 &lt;strong&gt;iter&lt;/strong&gt; 方法，能够被遍历的都可以称之为可迭代对象。 例如python的容器类数据类型：List, Tuple, Set, Dict。使用 &lt;code&gt;iter()&lt;/code&gt; 函数可以将可迭代对象转换成迭代器。&lt;/p&gt;
&lt;h4 id=&#34;迭代器&#34;&gt;迭代器&lt;/h4&gt;
&lt;p&gt;包含 &lt;strong&gt;next&lt;/strong&gt; 魔法方法的对象。 对于可迭代对象，可以通过 &lt;code&gt;next()&lt;/code&gt; 方法调用，每次调用，都会返回可迭代对象的下一个元素。直到没有元素返回时抛出StopIteration异常。&lt;/p&gt;
&lt;h4 id=&#34;生成器&#34;&gt;生成器&lt;/h4&gt;
&lt;p&gt;可以看成是一个特殊的迭代器。使用 yield 方法代替 return。 每次调用，都会记录函数状态并返回当前值。下次调用，会继续从纪录的地方继续执行。&lt;/p&gt;
&lt;h4 id=&#34;装饰器&#34;&gt;装饰器&lt;/h4&gt;
&lt;p&gt;包含wrapper方法。旨在不改变函数原有代码的前提下，修改函数/给函数添加功能。 实现原理是因为 将原函数当成参数传入装饰器函数。 涉及到一个概念： Python中，函数是一等公民.&lt;/p&gt;
&lt;h4 id=&#34;上下文管理器&#34;&gt;上下文管理器&lt;/h4&gt;
&lt;p&gt;可以理解成包含__enter__, __exit__魔法方法的对象。 通过with调用，在读取文件，数据库连接，锁的获取和释放中经常使用。作用是确保资源的正确使用和释放。例如：&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
