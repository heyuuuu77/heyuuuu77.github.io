<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Django on ExampleSite</title>
    <link>http://localhost:65535/tags/django/</link>
    <description>Recent content in Django on ExampleSite</description>
    <image>
      <title>ExampleSite</title>
      <url>http://localhost:65535/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>http://localhost:65535/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- 0.141.0</generator>
    <language>en</language>
    <lastBuildDate>Wed, 15 Jan 2025 11:30:03 +0000</lastBuildDate>
    <atom:link href="http://localhost:65535/tags/django/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Python的一些知识点</title>
      <link>http://localhost:65535/posts/python/</link>
      <pubDate>Wed, 15 Jan 2025 11:30:03 +0000</pubDate>
      <guid>http://localhost:65535/posts/python/</guid>
      <description>&lt;h4 id=&#34;python的数据类型&#34;&gt;Python的数据类型&lt;/h4&gt;
&lt;p&gt;int: 整型
float: 浮点型
bool: 布尔值
str: 字符串
list: 列表，是一种可变的、有序的序列，可以包含不同类型的元素。使用方括号 [] 来定义。
tuple: 元祖，是一种不可变的、有序的序列，一旦创建，其元素不能被修改。使用圆括号 () 来定义。
set: 集合，是一种无序的、唯一的数据集合，不允许有重复的元素。使用花括号 {} 或 set() 函数来定义
dict: 字典，是一种无序的键值对集合，每个键必须是唯一的，且键必须是可哈希的数据类型（如整数、字符串、元组等）。使用花括号 {} 来定义，键和值之间用冒号 : 分隔
NoneType: 只有一个值 None，通常用于表示变量没有值或函数没有返回值。&lt;/p&gt;
&lt;h4 id=&#34;list列表-与-tuple元祖-的区别&#34;&gt;List(列表) 与 Tuple(元祖) 的区别&lt;/h4&gt;
&lt;p&gt;List 可变，通过可以通过索引修改、添加或删除， 使用[]定义。 Tuple不可变，使用()定义。&lt;/p&gt;
&lt;h4 id=&#34;可迭代对象&#34;&gt;可迭代对象&lt;/h4&gt;
&lt;p&gt;包含 &lt;strong&gt;iter&lt;/strong&gt; 方法，能够被遍历的都可以称之为可迭代对象。 例如python的容器类数据类型：List, Tuple, Set, Dict。使用 &lt;code&gt;iter()&lt;/code&gt; 函数可以将可迭代对象转换成迭代器。&lt;/p&gt;
&lt;h4 id=&#34;迭代器&#34;&gt;迭代器&lt;/h4&gt;
&lt;p&gt;包含 &lt;strong&gt;next&lt;/strong&gt; 魔法方法的对象。 对于可迭代对象，可以通过 &lt;code&gt;next()&lt;/code&gt; 方法调用，每次调用，都会返回可迭代对象的下一个元素。直到没有元素返回时抛出StopIteration异常。&lt;/p&gt;
&lt;h4 id=&#34;生成器&#34;&gt;生成器&lt;/h4&gt;
&lt;p&gt;可以看成是一个特殊的迭代器。使用 yield 方法代替 return。 每次调用，都会记录函数状态并返回当前值。下次调用，会继续从纪录的地方继续执行。&lt;/p&gt;
&lt;h4 id=&#34;装饰器&#34;&gt;装饰器&lt;/h4&gt;
&lt;p&gt;包含wrapper方法。旨在不改变函数原有代码的前提下，修改函数/给函数添加功能。 实现原理是因为 将原函数当成参数传入装饰器函数。 涉及到一个概念： Python中，函数是一等公民.&lt;/p&gt;
&lt;h4 id=&#34;上下文管理器&#34;&gt;上下文管理器&lt;/h4&gt;
&lt;p&gt;可以理解成包含__enter__, __exit__魔法方法的对象。 通过with调用，在读取文件，数据库连接，锁的获取和释放中经常使用。作用是确保资源的正确使用和释放。例如：&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
