<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>数据库 on Heyuuuu</title>
        <link>https://heyuuuu77.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/</link>
        <description>Recent content in 数据库 on Heyuuuu</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>© 2024-2025 Heyuuuu</copyright>
        <lastBuildDate>Mon, 24 Mar 2025 09:34:08 +0800</lastBuildDate><atom:link href="https://heyuuuu77.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>ClickHouse 性能之巅</title>
        <link>https://heyuuuu77.github.io/posts/clickhouse%E6%80%A7%E8%83%BD%E4%B9%8B%E5%B7%85/</link>
        <pubDate>Mon, 24 Mar 2025 09:34:08 +0800</pubDate>
        
        <guid>https://heyuuuu77.github.io/posts/clickhouse%E6%80%A7%E8%83%BD%E4%B9%8B%E5%B7%85/</guid>
        <description>&lt;h3 id=&#34;day1&#34;&gt;Day1
&lt;/h3&gt;&lt;h4 id=&#34;oltp--olap&#34;&gt;OLTP &amp;amp; OLAP
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;OLTP, OnLine Transaction Process 联机事务处理 (MySQL, PostgreSQL, Oracle)
OLTP使用的是高反式的表。好处是数据结构不容易，事务处理速度快&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;OLAP, OnLine Analyse Process 联机分析处理(Hive, HBase, ClickHouse)
OLAP数据库被称为数据仓库(数仓), 它是反范式的。数据冗余度很高，正因为如此。它被用做数据分析，因为单个宽表就包含了很多字段，不需要进行连表(JOIN)查询。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;第零范式&#34;&gt;第零范式
&lt;/h4&gt;&lt;p&gt;不遵循第一范式，都被称之为第零范式，即字段中可以存储json或者文档&lt;/p&gt;
&lt;h4 id=&#34;第一范式&#34;&gt;第一范式
&lt;/h4&gt;&lt;p&gt;指数据表中的每个属性都不可再拆分。&lt;/p&gt;
&lt;h3 id=&#34;day2&#34;&gt;Day2
&lt;/h3&gt;</description>
        </item>
        <item>
        <title>Redis 核心知识</title>
        <link>https://heyuuuu77.github.io/posts/redis/</link>
        <pubDate>Wed, 05 Feb 2025 09:39:00 +0800</pubDate>
        
        <guid>https://heyuuuu77.github.io/posts/redis/</guid>
        <description>&lt;h4 id=&#34;数据类型&#34;&gt;数据类型
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;String: 字符串&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hash: 哈希, 是一个键值对集合，类似于 Python 中的字典。适合存储对象，一个哈希可以包含多个字段和对应的值，每个哈希最多可存储2^32 -1个键值对。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;常见命令:
&lt;ol&gt;
&lt;li&gt;设置单个字段值：HSET key field value，例如 HSET user:1 name &amp;ldquo;Bob&amp;rdquo;。&lt;/li&gt;
&lt;li&gt;获取单个字段值：HGET key field，例如 HGET user:1 name 会返回 &amp;ldquo;Bob&amp;rdquo;。&lt;/li&gt;
&lt;li&gt;获取所有字段和值：HGETALL key。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;List: 列表&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;常见命令:
LPUSH RPUSH LPOP RPOP LINDEX LRANGE LTRIM 等
是一个有序，可以重复的线性数据接口，基于双向链表，支持快速的插入和删除操作。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;LPUSH key value [value &amp;hellip;]：将一个或多个值插入到列表的头部。&lt;/li&gt;
&lt;li&gt;RPUSH key value [value &amp;hellip;]：将一个或多个值插入到列表的尾部。&lt;/li&gt;
&lt;li&gt;LPOP key：移除并返回列表的第一个元素。&lt;/li&gt;
&lt;li&gt;RPOP key：移除并返回列表的最后一个元素。&lt;/li&gt;
&lt;li&gt;LINDEX key index：返回列表中指定索引的元素。&lt;/li&gt;
&lt;li&gt;LRANGE key start stop：返回列表中指定范围内的元素。&lt;/li&gt;
&lt;li&gt;LTRIM key start stop：截取列表，只保留指定范围内的元素。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;消息队列: FIFO (First In First Out)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;LPUSH + RPOP&lt;/li&gt;
&lt;li&gt;LPUSH + BRPOP(阻塞式右取出)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;栈: LIFO (Last In First Out)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;LPUSH + LPOP&lt;/li&gt;
&lt;li&gt;RPUSH + RPOP&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set: 集合&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;常见命令:
SADD SMEMBERS SREM SISMEMBER SCARD 等
是一个无序，不重复的集合数据接口，基于哈希表实现，支持快速的插入、删除和查找操作。
&lt;ol&gt;
&lt;li&gt;SADD key member [member&amp;hellip;]：向集合中添加一个或多个成员。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;常用场景:
点赞/投票， 关注/取消关注， 共同关注， 推荐系统。
&lt;ol&gt;
&lt;li&gt;去重：集合可以用于存储唯一的元素，例如用户 ID 列表。&lt;/li&gt;
&lt;li&gt;交集、并集、差集：可以对多个集合进行交集、并集、差集操作，例如找出两个用户共同关注的话题。&lt;/li&gt;
&lt;li&gt;ZRANGE key start stop：返回有序集合中指定范围内的元素。&lt;/li&gt;
&lt;li&gt;ZREM key member：移除有序集合中的一个或多个成员。&lt;/li&gt;
&lt;li&gt;ZSCORE key member：返回有序集合中指定成员的分数。&lt;/li&gt;
&lt;li&gt;ZINCRBY key increment member：增加有序集合中指定成员的分数。&lt;/li&gt;
&lt;li&gt;SISMEMBER key member：判断成员是否在集合中.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sorted Set: 有序集合&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;核心用途
&lt;ul&gt;
&lt;li&gt;排行榜&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    ZADD leaderboard 1000 &amp;#34;player1&amp;#34;  # 玩家1得分1000
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    ZADD leaderboard 800 &amp;#34;player2&amp;#34;  # 玩家2得分800
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    ZREVRANGE leaderboard 0 2  # 获取排行榜前3名（降序）
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;消息队列&lt;/li&gt;
&lt;li&gt;延时任务&lt;/li&gt;
&lt;li&gt;计数器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
