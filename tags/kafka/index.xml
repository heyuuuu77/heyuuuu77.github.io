<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Kafka on heyuuuu77</title>
    <link>https://heyuuuu77.github.io/tags/kafka/</link>
    <description>Recent content in Kafka on heyuuuu77</description>
    <image>
      <title>heyuuuu77</title>
      <url>https://heyuuuu77.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://heyuuuu77.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- 0.145.0</generator>
    <language>en</language>
    <lastBuildDate>Wed, 12 Feb 2025 19:36:38 +0800</lastBuildDate>
    <atom:link href="https://heyuuuu77.github.io/tags/kafka/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Kafka</title>
      <link>https://heyuuuu77.github.io/posts/kafka/</link>
      <pubDate>Wed, 12 Feb 2025 19:36:38 +0800</pubDate>
      <guid>https://heyuuuu77.github.io/posts/kafka/</guid>
      <description>&lt;h4 id=&#34;kafka&#34;&gt;Kafka&lt;/h4&gt;
&lt;p&gt;分布式的消息引擎系统&lt;/p&gt;
&lt;h4 id=&#34;名词解释&#34;&gt;名词解释&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;消息(Record): Kafka处理的对象。&lt;/li&gt;
&lt;li&gt;主题(Topic): 承载消息的容器，可以为每个业务、应用甚至每类数据都创建专属主题。&lt;/li&gt;
&lt;li&gt;分区(Partition): 一个有序不变的消息序列，将每个主题划分成多个分区，每个分区是一组有序的消息日志。Kafka分区编号从0开始。&lt;/li&gt;
&lt;li&gt;消息位移(Offset): 分区中每条消息的位置信息，单调递增且不变的值。&lt;/li&gt;
&lt;li&gt;副本(Replica): 又分为领导者副本(Leader Replica) 和追随者副本(Follower Replica)。 前者对外提供服务，指与客户端程序交互。后者被动追随，不与外界进行交互。
副本的工作机制: 生产者总是向领导者副本写消息；而消费者总是从领导者副本读消息。 追随者副本向领导者副本发送请求，请求领导者把最新生产的消息发给它。这样它就可以跟领导者同步。&lt;/li&gt;
&lt;li&gt;生产者(Producer): 向主题发布消息的客户端应用程序称之为生产者。&lt;/li&gt;
&lt;li&gt;消费者(Consumer): 定于主题消息的客户端应用程序。&lt;/li&gt;
&lt;li&gt;消费者位移(Consumer Offset): 表征消费者消费进度，每个消费者都有自己的消费者位移。&lt;/li&gt;
&lt;li&gt;消费者组(Consumer Group): 多个消费者实例共同组成一个组，同时消费多个分区以实现高吞吐。&lt;/li&gt;
&lt;li&gt;重平衡(Rebalance): 消费者组内某个消费者实例挂掉后，其他消费者实例自动重新分配订阅主题分区的过程。Rebalance 是。Kafka 消费者端实现高可用的重要手段。&lt;/li&gt;
&lt;li&gt;客户端(Clients): 生产者/消费者统称为客户端&lt;/li&gt;
&lt;li&gt;Broker: Kafka的服务器端由Broker的服务进程构成，即一个Kafka集群由多个Broker组成，Broker负责接收和处理客户端发送过来的请求，以及对消息持久化&lt;/li&gt;
&lt;li&gt;备份机制(Replication): 将相同数据拷贝到多台机器上，这些相同数据拷贝在Kafka中被称为副本(Replica)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每个分区都可以配置若干个副本，其中只能有1个领导者副本和 N-1个追随者副本。&lt;/p&gt;
&lt;h4 id=&#34;三层消息架构&#34;&gt;三层消息架构&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;主题层: 每个主题配置 M 个分区，每个分区又可以配置 N 个副本。&lt;/li&gt;
&lt;li&gt;分区层: 每个分区的 N 个副本只有一个领导者，对外提供服务， 其他 N-1 个副本是追随者副本， 指示提供数据备份。&lt;/li&gt;
&lt;li&gt;消息层: 分区中包括若干消息，每条消息的位移从0开始，依次递增。 最终客户端是能与分区领导者副本进行交互。&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
  </channel>
</rss>
